{"ast":null,"code":"var inherits=require('inherits');var Buffer=require('buffer').Buffer;var DERDecoder=require(\"./der\");function PEMDecoder(entity){DERDecoder.call(this,entity);this.enc='pem';};inherits(PEMDecoder,DERDecoder);module.exports=PEMDecoder;PEMDecoder.prototype.decode=function decode(data,options){var lines=data.toString().split(/[\\r\\n]+/g);var label=options.label.toUpperCase();var re=/^-----(BEGIN|END) ([^-]+)-----$/;var start=-1;var end=-1;for(var i=0;i<lines.length;i++){var match=lines[i].match(re);if(match===null)continue;if(match[2]!==label)continue;if(start===-1){if(match[1]!=='BEGIN')break;start=i;}else{if(match[1]!=='END')break;end=i;break;}}if(start===-1||end===-1)throw new Error('PEM section not found for: '+label);var base64=lines.slice(start+1,end).join('');base64.replace(/[^a-z0-9\\+\\/=]+/gi,'');var input=new Buffer(base64,'base64');return DERDecoder.prototype.decode.call(this,input,options);};","map":{"version":3,"sources":["/Users/naohirofujie/.anyenv/envs/nodenv/versions/14.5.0/lib/node_modules/expo-cli/node_modules/asn1.js/lib/asn1/decoders/pem.js"],"names":["inherits","require","Buffer","DERDecoder","PEMDecoder","entity","call","enc","module","exports","prototype","decode","data","options","lines","toString","split","label","toUpperCase","re","start","end","i","length","match","Error","base64","slice","join","replace","input"],"mappings":"AAAA,GAAIA,CAAAA,QAAQ,CAAGC,OAAO,CAAC,UAAD,CAAtB,CACA,GAAIC,CAAAA,MAAM,CAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAA/B,CAEA,GAAIC,CAAAA,UAAU,CAAGF,OAAO,SAAxB,CAEA,QAASG,CAAAA,UAAT,CAAoBC,MAApB,CAA4B,CAC1BF,UAAU,CAACG,IAAX,CAAgB,IAAhB,CAAsBD,MAAtB,EACA,KAAKE,GAAL,CAAW,KAAX,CACD,EACDP,QAAQ,CAACI,UAAD,CAAaD,UAAb,CAAR,CACAK,MAAM,CAACC,OAAP,CAAiBL,UAAjB,CAEAA,UAAU,CAACM,SAAX,CAAqBC,MAArB,CAA8B,QAASA,CAAAA,MAAT,CAAgBC,IAAhB,CAAsBC,OAAtB,CAA+B,CAC3D,GAAIC,CAAAA,KAAK,CAAGF,IAAI,CAACG,QAAL,GAAgBC,KAAhB,CAAsB,UAAtB,CAAZ,CAEA,GAAIC,CAAAA,KAAK,CAAGJ,OAAO,CAACI,KAAR,CAAcC,WAAd,EAAZ,CAEA,GAAIC,CAAAA,EAAE,CAAG,iCAAT,CACA,GAAIC,CAAAA,KAAK,CAAG,CAAC,CAAb,CACA,GAAIC,CAAAA,GAAG,CAAG,CAAC,CAAX,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGR,KAAK,CAACS,MAA1B,CAAkCD,CAAC,EAAnC,CAAuC,CACrC,GAAIE,CAAAA,KAAK,CAAGV,KAAK,CAACQ,CAAD,CAAL,CAASE,KAAT,CAAeL,EAAf,CAAZ,CACA,GAAIK,KAAK,GAAK,IAAd,CACE,SAEF,GAAIA,KAAK,CAAC,CAAD,CAAL,GAAaP,KAAjB,CACE,SAEF,GAAIG,KAAK,GAAK,CAAC,CAAf,CAAkB,CAChB,GAAII,KAAK,CAAC,CAAD,CAAL,GAAa,OAAjB,CACE,MACFJ,KAAK,CAAGE,CAAR,CACD,CAJD,IAIO,CACL,GAAIE,KAAK,CAAC,CAAD,CAAL,GAAa,KAAjB,CACE,MACFH,GAAG,CAAGC,CAAN,CACA,MACD,CACF,CACD,GAAIF,KAAK,GAAK,CAAC,CAAX,EAAgBC,GAAG,GAAK,CAAC,CAA7B,CACE,KAAM,IAAII,CAAAA,KAAJ,CAAU,8BAAgCR,KAA1C,CAAN,CAEF,GAAIS,CAAAA,MAAM,CAAGZ,KAAK,CAACa,KAAN,CAAYP,KAAK,CAAG,CAApB,CAAuBC,GAAvB,EAA4BO,IAA5B,CAAiC,EAAjC,CAAb,CAEAF,MAAM,CAACG,OAAP,CAAe,mBAAf,CAAoC,EAApC,EAEA,GAAIC,CAAAA,KAAK,CAAG,GAAI5B,CAAAA,MAAJ,CAAWwB,MAAX,CAAmB,QAAnB,CAAZ,CACA,MAAOvB,CAAAA,UAAU,CAACO,SAAX,CAAqBC,MAArB,CAA4BL,IAA5B,CAAiC,IAAjC,CAAuCwB,KAAvC,CAA8CjB,OAA9C,CAAP,CACD,CApCD","sourcesContent":["var inherits = require('inherits');\nvar Buffer = require('buffer').Buffer;\n\nvar DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n};\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  var lines = data.toString().split(/[\\r\\n]+/g);\n\n  var label = options.label.toUpperCase();\n\n  var re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  var start = -1;\n  var end = -1;\n  for (var i = 0; i < lines.length; i++) {\n    var match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  var base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9\\+\\/=]+/gi, '');\n\n  var input = new Buffer(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n"]},"metadata":{},"sourceType":"script"}