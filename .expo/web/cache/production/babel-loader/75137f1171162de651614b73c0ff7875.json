{"ast":null,"code":"'use strict';var hash=require('hash.js');var curves=require(\"../curves\");var utils=require(\"../utils\");var assert=utils.assert;var parseBytes=utils.parseBytes;var KeyPair=require(\"./key\");var Signature=require(\"./signature\");function EDDSA(curve){assert(curve==='ed25519','only tested with ed25519 so far');if(!(this instanceof EDDSA))return new EDDSA(curve);var curve=curves[curve].curve;this.curve=curve;this.g=curve.g;this.g.precompute(curve.n.bitLength()+1);this.pointClass=curve.point().constructor;this.encodingLength=Math.ceil(curve.n.bitLength()/8);this.hash=hash.sha512;}module.exports=EDDSA;EDDSA.prototype.sign=function sign(message,secret){message=parseBytes(message);var key=this.keyFromSecret(secret);var r=this.hashInt(key.messagePrefix(),message);var R=this.g.mul(r);var Rencoded=this.encodePoint(R);var s_=this.hashInt(Rencoded,key.pubBytes(),message).mul(key.priv());var S=r.add(s_).umod(this.curve.n);return this.makeSignature({R:R,S:S,Rencoded:Rencoded});};EDDSA.prototype.verify=function verify(message,sig,pub){message=parseBytes(message);sig=this.makeSignature(sig);var key=this.keyFromPublic(pub);var h=this.hashInt(sig.Rencoded(),key.pubBytes(),message);var SG=this.g.mul(sig.S());var RplusAh=sig.R().add(key.pub().mul(h));return RplusAh.eq(SG);};EDDSA.prototype.hashInt=function hashInt(){var hash=this.hash();for(var i=0;i<arguments.length;i++){hash.update(arguments[i]);}return utils.intFromLE(hash.digest()).umod(this.curve.n);};EDDSA.prototype.keyFromPublic=function keyFromPublic(pub){return KeyPair.fromPublic(this,pub);};EDDSA.prototype.keyFromSecret=function keyFromSecret(secret){return KeyPair.fromSecret(this,secret);};EDDSA.prototype.makeSignature=function makeSignature(sig){if(sig instanceof Signature)return sig;return new Signature(this,sig);};EDDSA.prototype.encodePoint=function encodePoint(point){var enc=point.getY().toArray('le',this.encodingLength);enc[this.encodingLength-1]|=point.getX().isOdd()?0x80:0;return enc;};EDDSA.prototype.decodePoint=function decodePoint(bytes){bytes=utils.parseBytes(bytes);var lastIx=bytes.length-1;var normed=bytes.slice(0,lastIx).concat(bytes[lastIx]&~0x80);var xIsOdd=(bytes[lastIx]&0x80)!==0;var y=utils.intFromLE(normed);return this.curve.pointFromY(y,xIsOdd);};EDDSA.prototype.encodeInt=function encodeInt(num){return num.toArray('le',this.encodingLength);};EDDSA.prototype.decodeInt=function decodeInt(bytes){return utils.intFromLE(bytes);};EDDSA.prototype.isPoint=function isPoint(val){return val instanceof this.pointClass;};","map":{"version":3,"sources":["/Users/naohirofujie/.anyenv/envs/nodenv/versions/14.5.0/lib/node_modules/expo-cli/node_modules/elliptic/lib/elliptic/eddsa/index.js"],"names":["hash","require","curves","utils","assert","parseBytes","KeyPair","Signature","EDDSA","curve","g","precompute","n","bitLength","pointClass","point","constructor","encodingLength","Math","ceil","sha512","module","exports","prototype","sign","message","secret","key","keyFromSecret","r","hashInt","messagePrefix","R","mul","Rencoded","encodePoint","s_","pubBytes","priv","S","add","umod","makeSignature","verify","sig","pub","keyFromPublic","h","SG","RplusAh","eq","i","arguments","length","update","intFromLE","digest","fromPublic","fromSecret","enc","getY","toArray","getX","isOdd","decodePoint","bytes","lastIx","normed","slice","concat","xIsOdd","y","pointFromY","encodeInt","num","decodeInt","isPoint","val"],"mappings":"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","sourcesContent":["'use strict';\n\nvar hash = require('hash.js');\nvar curves = require('../curves');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EDDSA(curve) {\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\n\n  if (!(this instanceof EDDSA))\n    return new EDDSA(curve);\n\n  var curve = curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = hash.sha512;\n}\n\nmodule.exports = EDDSA;\n\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\nEDDSA.prototype.sign = function sign(message, secret) {\n  message = parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\n               .mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\n};\n\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\nEDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = parseBytes(message);\n  sig = this.makeSignature(sig);\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\nEDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n  for (var i = 0; i < arguments.length; i++)\n    hash.update(arguments[i]);\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return KeyPair.fromPublic(this, pub);\n};\n\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return KeyPair.fromSecret(this, secret);\n};\n\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof Signature)\n    return sig;\n  return new Signature(this, sig);\n};\n\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\nEDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = utils.parseBytes(bytes);\n\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n\n  var y = utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return utils.intFromLE(bytes);\n};\n\nEDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};\n"]},"metadata":{},"sourceType":"script"}