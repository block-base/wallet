{"ast":null,"code":"var findProc=/Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r\\+\\/\\=]+)[\\n\\r]+/m;var startRegex=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;var fullRegex=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r\\+\\/\\=]+)-----END \\1-----$/m;var evp=require('evp_bytestokey');var ciphers=require('browserify-aes');var Buffer=require('safe-buffer').Buffer;module.exports=function(okey,password){var key=okey.toString();var match=key.match(findProc);var decrypted;if(!match){var match2=key.match(fullRegex);decrypted=new Buffer(match2[2].replace(/[\\r\\n]/g,''),'base64');}else{var suite='aes'+match[1];var iv=Buffer.from(match[2],'hex');var cipherText=Buffer.from(match[3].replace(/[\\r\\n]/g,''),'base64');var cipherKey=evp(password,iv.slice(0,8),parseInt(match[1],10)).key;var out=[];var cipher=ciphers.createDecipheriv(suite,cipherKey,iv);out.push(cipher.update(cipherText));out.push(cipher.final());decrypted=Buffer.concat(out);}var tag=key.match(startRegex)[1];return{tag:tag,data:decrypted};};","map":{"version":3,"sources":["/Users/naohirofujie/.anyenv/envs/nodenv/versions/14.5.0/lib/node_modules/expo-cli/node_modules/parse-asn1/fixProc.js"],"names":["findProc","startRegex","fullRegex","evp","require","ciphers","Buffer","module","exports","okey","password","key","toString","match","decrypted","match2","replace","suite","iv","from","cipherText","cipherKey","slice","parseInt","out","cipher","createDecipheriv","push","update","final","concat","tag","data"],"mappings":"AACA,GAAIA,CAAAA,QAAQ,CAAG,0HAAf,CACA,GAAIC,CAAAA,UAAU,CAAG,6CAAjB,CACA,GAAIC,CAAAA,SAAS,CAAG,mFAAhB,CACA,GAAIC,CAAAA,GAAG,CAAGC,OAAO,CAAC,gBAAD,CAAjB,CACA,GAAIC,CAAAA,OAAO,CAAGD,OAAO,CAAC,gBAAD,CAArB,CACA,GAAIE,CAAAA,MAAM,CAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBE,MAApC,CACAC,MAAM,CAACC,OAAP,CAAiB,SAAUC,IAAV,CAAgBC,QAAhB,CAA0B,CACzC,GAAIC,CAAAA,GAAG,CAAGF,IAAI,CAACG,QAAL,EAAV,CACA,GAAIC,CAAAA,KAAK,CAAGF,GAAG,CAACE,KAAJ,CAAUb,QAAV,CAAZ,CACA,GAAIc,CAAAA,SAAJ,CACA,GAAI,CAACD,KAAL,CAAY,CACV,GAAIE,CAAAA,MAAM,CAAGJ,GAAG,CAACE,KAAJ,CAAUX,SAAV,CAAb,CACAY,SAAS,CAAG,GAAIR,CAAAA,MAAJ,CAAWS,MAAM,CAAC,CAAD,CAAN,CAAUC,OAAV,CAAkB,SAAlB,CAA6B,EAA7B,CAAX,CAA6C,QAA7C,CAAZ,CACD,CAHD,IAGO,CACL,GAAIC,CAAAA,KAAK,CAAG,MAAQJ,KAAK,CAAC,CAAD,CAAzB,CACA,GAAIK,CAAAA,EAAE,CAAGZ,MAAM,CAACa,IAAP,CAAYN,KAAK,CAAC,CAAD,CAAjB,CAAsB,KAAtB,CAAT,CACA,GAAIO,CAAAA,UAAU,CAAGd,MAAM,CAACa,IAAP,CAAYN,KAAK,CAAC,CAAD,CAAL,CAASG,OAAT,CAAiB,SAAjB,CAA4B,EAA5B,CAAZ,CAA6C,QAA7C,CAAjB,CACA,GAAIK,CAAAA,SAAS,CAAGlB,GAAG,CAACO,QAAD,CAAWQ,EAAE,CAACI,KAAH,CAAS,CAAT,CAAY,CAAZ,CAAX,CAA2BC,QAAQ,CAACV,KAAK,CAAC,CAAD,CAAN,CAAW,EAAX,CAAnC,CAAH,CAAsDF,GAAtE,CACA,GAAIa,CAAAA,GAAG,CAAG,EAAV,CACA,GAAIC,CAAAA,MAAM,CAAGpB,OAAO,CAACqB,gBAAR,CAAyBT,KAAzB,CAAgCI,SAAhC,CAA2CH,EAA3C,CAAb,CACAM,GAAG,CAACG,IAAJ,CAASF,MAAM,CAACG,MAAP,CAAcR,UAAd,CAAT,EACAI,GAAG,CAACG,IAAJ,CAASF,MAAM,CAACI,KAAP,EAAT,EACAf,SAAS,CAAGR,MAAM,CAACwB,MAAP,CAAcN,GAAd,CAAZ,CACD,CACD,GAAIO,CAAAA,GAAG,CAAGpB,GAAG,CAACE,KAAJ,CAAUZ,UAAV,EAAsB,CAAtB,CAAV,CACA,MAAO,CACL8B,GAAG,CAAEA,GADA,CAELC,IAAI,CAAElB,SAFD,CAAP,CAID,CAvBD","sourcesContent":["// adapted from https://github.com/apatil/pemstrip\nvar findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r\\+\\/\\=]+)[\\n\\r]+/m\nvar startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m\nvar fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r\\+\\/\\=]+)-----END \\1-----$/m\nvar evp = require('evp_bytestokey')\nvar ciphers = require('browserify-aes')\nvar Buffer = require('safe-buffer').Buffer\nmodule.exports = function (okey, password) {\n  var key = okey.toString()\n  var match = key.match(findProc)\n  var decrypted\n  if (!match) {\n    var match2 = key.match(fullRegex)\n    decrypted = new Buffer(match2[2].replace(/[\\r\\n]/g, ''), 'base64')\n  } else {\n    var suite = 'aes' + match[1]\n    var iv = Buffer.from(match[2], 'hex')\n    var cipherText = Buffer.from(match[3].replace(/[\\r\\n]/g, ''), 'base64')\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key\n    var out = []\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)\n    out.push(cipher.update(cipherText))\n    out.push(cipher.final())\n    decrypted = Buffer.concat(out)\n  }\n  var tag = key.match(startRegex)[1]\n  return {\n    tag: tag,\n    data: decrypted\n  }\n}\n"]},"metadata":{},"sourceType":"script"}