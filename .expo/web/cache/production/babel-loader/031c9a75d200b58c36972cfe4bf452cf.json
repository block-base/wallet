{"ast":null,"code":"var xor=require('buffer-xor');var Buffer=require('safe-buffer').Buffer;var incr32=require(\"../incr32\");function getBlock(self){var out=self._cipher.encryptBlockRaw(self._prev);incr32(self._prev);return out;}var blockSize=16;exports.encrypt=function(self,chunk){var chunkNum=Math.ceil(chunk.length/blockSize);var start=self._cache.length;self._cache=Buffer.concat([self._cache,Buffer.allocUnsafe(chunkNum*blockSize)]);for(var i=0;i<chunkNum;i++){var out=getBlock(self);var offset=start+i*blockSize;self._cache.writeUInt32BE(out[0],offset+0);self._cache.writeUInt32BE(out[1],offset+4);self._cache.writeUInt32BE(out[2],offset+8);self._cache.writeUInt32BE(out[3],offset+12);}var pad=self._cache.slice(0,chunk.length);self._cache=self._cache.slice(chunk.length);return xor(chunk,pad);};","map":{"version":3,"sources":["/Users/naohirofujie/.anyenv/envs/nodenv/versions/14.5.0/lib/node_modules/expo-cli/node_modules/browserify-aes/modes/ctr.js"],"names":["xor","require","Buffer","incr32","getBlock","self","out","_cipher","encryptBlockRaw","_prev","blockSize","exports","encrypt","chunk","chunkNum","Math","ceil","length","start","_cache","concat","allocUnsafe","i","offset","writeUInt32BE","pad","slice"],"mappings":"AAAA,GAAIA,CAAAA,GAAG,CAAGC,OAAO,CAAC,YAAD,CAAjB,CACA,GAAIC,CAAAA,MAAM,CAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,MAApC,CACA,GAAIC,CAAAA,MAAM,CAAGF,OAAO,aAApB,CAEA,QAASG,CAAAA,QAAT,CAAmBC,IAAnB,CAAyB,CACvB,GAAIC,CAAAA,GAAG,CAAGD,IAAI,CAACE,OAAL,CAAaC,eAAb,CAA6BH,IAAI,CAACI,KAAlC,CAAV,CACAN,MAAM,CAACE,IAAI,CAACI,KAAN,CAAN,CACA,MAAOH,CAAAA,GAAP,CACD,CAED,GAAII,CAAAA,SAAS,CAAG,EAAhB,CACAC,OAAO,CAACC,OAAR,CAAkB,SAAUP,IAAV,CAAgBQ,KAAhB,CAAuB,CACvC,GAAIC,CAAAA,QAAQ,CAAGC,IAAI,CAACC,IAAL,CAAUH,KAAK,CAACI,MAAN,CAAeP,SAAzB,CAAf,CACA,GAAIQ,CAAAA,KAAK,CAAGb,IAAI,CAACc,MAAL,CAAYF,MAAxB,CACAZ,IAAI,CAACc,MAAL,CAAcjB,MAAM,CAACkB,MAAP,CAAc,CAC1Bf,IAAI,CAACc,MADqB,CAE1BjB,MAAM,CAACmB,WAAP,CAAmBP,QAAQ,CAAGJ,SAA9B,CAF0B,CAAd,CAAd,CAIA,IAAK,GAAIY,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGR,QAApB,CAA8BQ,CAAC,EAA/B,CAAmC,CACjC,GAAIhB,CAAAA,GAAG,CAAGF,QAAQ,CAACC,IAAD,CAAlB,CACA,GAAIkB,CAAAA,MAAM,CAAGL,KAAK,CAAGI,CAAC,CAAGZ,SAAzB,CACAL,IAAI,CAACc,MAAL,CAAYK,aAAZ,CAA0BlB,GAAG,CAAC,CAAD,CAA7B,CAAkCiB,MAAM,CAAG,CAA3C,EACAlB,IAAI,CAACc,MAAL,CAAYK,aAAZ,CAA0BlB,GAAG,CAAC,CAAD,CAA7B,CAAkCiB,MAAM,CAAG,CAA3C,EACAlB,IAAI,CAACc,MAAL,CAAYK,aAAZ,CAA0BlB,GAAG,CAAC,CAAD,CAA7B,CAAkCiB,MAAM,CAAG,CAA3C,EACAlB,IAAI,CAACc,MAAL,CAAYK,aAAZ,CAA0BlB,GAAG,CAAC,CAAD,CAA7B,CAAkCiB,MAAM,CAAG,EAA3C,EACD,CACD,GAAIE,CAAAA,GAAG,CAAGpB,IAAI,CAACc,MAAL,CAAYO,KAAZ,CAAkB,CAAlB,CAAqBb,KAAK,CAACI,MAA3B,CAAV,CACAZ,IAAI,CAACc,MAAL,CAAcd,IAAI,CAACc,MAAL,CAAYO,KAAZ,CAAkBb,KAAK,CAACI,MAAxB,CAAd,CACA,MAAOjB,CAAAA,GAAG,CAACa,KAAD,CAAQY,GAAR,CAAV,CACD,CAlBD","sourcesContent":["var xor = require('buffer-xor')\nvar Buffer = require('safe-buffer').Buffer\nvar incr32 = require('../incr32')\n\nfunction getBlock (self) {\n  var out = self._cipher.encryptBlockRaw(self._prev)\n  incr32(self._prev)\n  return out\n}\n\nvar blockSize = 16\nexports.encrypt = function (self, chunk) {\n  var chunkNum = Math.ceil(chunk.length / blockSize)\n  var start = self._cache.length\n  self._cache = Buffer.concat([\n    self._cache,\n    Buffer.allocUnsafe(chunkNum * blockSize)\n  ])\n  for (var i = 0; i < chunkNum; i++) {\n    var out = getBlock(self)\n    var offset = start + i * blockSize\n    self._cache.writeUInt32BE(out[0], offset + 0)\n    self._cache.writeUInt32BE(out[1], offset + 4)\n    self._cache.writeUInt32BE(out[2], offset + 8)\n    self._cache.writeUInt32BE(out[3], offset + 12)\n  }\n  var pad = self._cache.slice(0, chunk.length)\n  self._cache = self._cache.slice(chunk.length)\n  return xor(chunk, pad)\n}\n"]},"metadata":{},"sourceType":"script"}