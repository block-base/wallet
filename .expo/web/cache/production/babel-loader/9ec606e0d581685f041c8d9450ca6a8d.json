{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import crypto from\"crypto\";export var constants={did:{methodName:\"ion\",publicKeyType:\"EcdsaSecp256k1VerificationKey2019\",keyId:\"signingKey\"},jwt:{header:{alg:\"ES256K\"},payload:{iss:\"https://self-issued.me\",iat:0,exp:9999999999}},jwk:{kty:\"EC\",crv:\"P-256K\"},ecdh:{crv:\"secp256k1\"},hash:{type:\"sha256\",fc:0x12},pem:{pre:\"-----BEGIN EC PRIVATE KEY-----\\n\",post:\"\\n-----END EC PRIVATE KEY-----\"},asn1:{pre:\"302e0201010420\",post:\"a00706052b8104000a\"}};export var base64url={encode:function encode(unencoded){return Buffer.from(unencoded).toString(\"base64\").replace(/\\+/g,\"-\").replace(/\\//g,\"_\").replace(/=+$/,\"\");},decode:function decode(encoded){encoded=encoded.replace(/-/g,\"+\").replace(/_/g,\"/\");while(encoded.length%4){encoded+=\"=\";}return Buffer.from(encoded,\"base64\").toString(\"utf8\");}};export var jwt={decode:function decode(jwt){var payload=JSON.parse(base64url.decode(jwt.split(\".\")[1]));return payload;}};export var multihash=function multihash(data){var digest=crypto.createHash(constants.hash.type).update(data).digest();var prefix=Buffer.from([constants.hash.fc,digest.length]);return Buffer.concat([prefix,digest]);};export var generateJti=function generateJti(){return crypto.randomBytes(16).toString(\"hex\");};export var generatePrivateKey=function generatePrivateKey(){return crypto.randomBytes(32).toString(\"hex\");};export var privateKeyToPem=function privateKeyToPem(privateKey){var asn1=\"\"+constants.asn1.pre+privateKey+constants.asn1.post;var asn1Base64=Buffer.from(asn1,\"hex\").toString(\"base64\");var pem=\"\"+constants.pem.pre+asn1Base64+constants.pem.post;return pem;};export var privateKeyToJwk=function privateKeyToJwk(privateKey){var privateKeyBuffer=Buffer.from(privateKey,\"hex\");var ecdh=crypto.createECDH(constants.ecdh.crv);ecdh.setPrivateKey(privateKeyBuffer);var pub=ecdh.getPublicKey();var publicKeyJwk={kty:constants.jwk.kty,crv:constants.jwk.crv,x:base64url.encode(pub.slice(1,32+1)),y:base64url.encode(pub.slice(32+1))};var privateKeyJwk=_objectSpread({d:base64url.encode(privateKeyBuffer)},publicKeyJwk);return{publicKeyJwk:publicKeyJwk,privateKeyJwk:privateKeyJwk};};export var publicKeyJwkToIonDid=function publicKeyJwkToIonDid(publicKeyJwk){var id=constants.did.keyId;var canonical_jwk=JSON.stringify(publicKeyJwk);var commitment_hash=base64url.encode(multihash(canonical_jwk));var patches=[{action:\"replace\",document:{public_keys:[{id:id,type:constants.did.publicKeyType,jwk:publicKeyJwk,purpose:[\"auth\",\"general\"]}]}}];var canonical_delta=JSON.stringify({update_commitment:commitment_hash,patches:patches});var delta=base64url.encode(canonical_delta);var delta_hash=base64url.encode(multihash(canonical_delta));var canonical_suffix_data=JSON.stringify({delta_hash:delta_hash,recovery_commitment:commitment_hash});var didUniqueSuffix=base64url.encode(multihash(canonical_suffix_data));var suffix_data=base64url.encode(canonical_suffix_data);var shortFormDid=\"did:\"+constants.did.methodName+\":\"+didUniqueSuffix;var longFormDid=shortFormDid+\"?-\"+constants.did.methodName+\"-initial-state=\"+suffix_data+\".\"+delta;return longFormDid;};export var Wallet=function Wallet(privateKey){var _this=this;_classCallCheck(this,Wallet);this.siop=function(options){var jti=generateJti();var header={alg:constants.jwt.header.alg,kid:_this.did+\"#\"+constants.did.keyId};var payload=_objectSpread({iss:constants.jwt.payload.iss,iat:constants.jwt.payload.iat,exp:constants.jwt.payload.exp,did:_this.did,jti:jti,sub_jwk:_this.publicKeyJwk},options);return _this.sign(header,payload);};this.sign=function(header,payload){var pem=privateKeyToPem(_this.privateKey);var encodedHeader=base64url.encode(JSON.stringify(header));var encodedPayload=base64url.encode(JSON.stringify(payload));var message=encodedHeader+\".\"+encodedPayload;var signature=base64url.encode(crypto.createSign(constants.hash.type).update(message).sign(pem));var result=encodedHeader+\".\"+encodedPayload+\".\"+signature;return result;};this.privateKey=privateKey?privateKey:generatePrivateKey();var _privateKeyToJwk=privateKeyToJwk(this.privateKey),publicKeyJwk=_privateKeyToJwk.publicKeyJwk,privateKeyJwk=_privateKeyToJwk.privateKeyJwk;this.publicKeyJwk=publicKeyJwk;this.privateKeyJwk=privateKeyJwk;this.did=publicKeyJwkToIonDid(publicKeyJwk);};","map":{"version":3,"sources":["/Users/naohirofujie/Develop/MSVC/bbwallet/browser-wallet/wallet/modules/index.ts"],"names":["crypto","constants","did","methodName","publicKeyType","keyId","jwt","header","alg","payload","iss","iat","exp","jwk","kty","crv","ecdh","hash","type","fc","pem","pre","post","asn1","base64url","encode","unencoded","Buffer","from","toString","replace","decode","encoded","length","JSON","parse","split","multihash","data","digest","createHash","update","prefix","concat","generateJti","randomBytes","generatePrivateKey","privateKeyToPem","privateKey","asn1Base64","privateKeyToJwk","privateKeyBuffer","createECDH","setPrivateKey","pub","getPublicKey","publicKeyJwk","x","slice","y","privateKeyJwk","d","publicKeyJwkToIonDid","id","canonical_jwk","stringify","commitment_hash","patches","action","document","public_keys","purpose","canonical_delta","update_commitment","delta","delta_hash","canonical_suffix_data","recovery_commitment","didUniqueSuffix","suffix_data","shortFormDid","longFormDid","Wallet","siop","options","jti","kid","sub_jwk","sign","encodedHeader","encodedPayload","message","signature","createSign","result"],"mappings":"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","sourcesContent":["import crypto from \"crypto\";\n\nexport const constants = {\n  did: {\n    methodName: \"ion\",\n    publicKeyType: \"EcdsaSecp256k1VerificationKey2019\",\n    keyId: \"signingKey\",\n  },\n  jwt: {\n    header: {\n      alg: \"ES256K\",\n    },\n    payload: {\n      iss: \"https://self-issued.me\",\n      iat: 0,\n      exp: 9999999999,\n    },\n  },\n  jwk: {\n    kty: \"EC\",\n    crv: \"P-256K\",\n  },\n  ecdh: {\n    crv: \"secp256k1\",\n  },\n  hash: {\n    type: \"sha256\",\n    fc: 0x12,\n  },\n  pem: {\n    pre: \"-----BEGIN EC PRIVATE KEY-----\\n\",\n    post: \"\\n-----END EC PRIVATE KEY-----\",\n  },\n  asn1: {\n    pre: \"302e0201010420\",\n    post: \"a00706052b8104000a\",\n  },\n};\n\nexport const base64url = {\n  encode: (unencoded) => {\n    return Buffer.from(unencoded)\n      .toString(\"base64\")\n      .replace(/\\+/g, \"-\")\n      .replace(/\\//g, \"_\")\n      .replace(/=+$/, \"\");\n  },\n  decode: (encoded) => {\n    encoded = encoded.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    while (encoded.length % 4) {\n      encoded += \"=\";\n    }\n    return Buffer.from(encoded, \"base64\").toString(\"utf8\");\n  },\n};\n\nexport const jwt = {\n  decode: (jwt) => {\n    const payload = JSON.parse(base64url.decode(jwt.split(\".\")[1]));\n    return payload;\n  },\n};\n\nexport const multihash = (data) => {\n  const digest = crypto.createHash(constants.hash.type).update(data).digest();\n  const prefix = Buffer.from([constants.hash.fc, digest.length]);\n  return Buffer.concat([prefix, digest]);\n};\n\nexport const generateJti = () => {\n  return crypto.randomBytes(16).toString(\"hex\");\n};\n\nexport const generatePrivateKey = () => {\n  return crypto.randomBytes(32).toString(\"hex\");\n};\n\nexport const privateKeyToPem = (privateKey) => {\n  const asn1 = `${constants.asn1.pre}${privateKey}${constants.asn1.post}`;\n  const asn1Base64 = Buffer.from(asn1, \"hex\").toString(\"base64\");\n  const pem = `${constants.pem.pre}${asn1Base64}${constants.pem.post}`;\n  return pem;\n};\n\nexport const privateKeyToJwk = (privateKey) => {\n  const privateKeyBuffer = Buffer.from(privateKey, \"hex\");\n  const ecdh = crypto.createECDH(constants.ecdh.crv);\n  ecdh.setPrivateKey(privateKeyBuffer);\n  const pub = ecdh.getPublicKey();\n  const publicKeyJwk = {\n    kty: constants.jwk.kty,\n    crv: constants.jwk.crv,\n    x: base64url.encode(pub.slice(1, 32 + 1)),\n    y: base64url.encode(pub.slice(32 + 1)),\n  };\n  const privateKeyJwk = {\n    d: base64url.encode(privateKeyBuffer),\n    ...publicKeyJwk,\n  };\n  return { publicKeyJwk, privateKeyJwk };\n};\n\nexport const publicKeyJwkToIonDid = (publicKeyJwk) => {\n  const id = constants.did.keyId;\n  const canonical_jwk = JSON.stringify(publicKeyJwk);\n  const commitment_hash = base64url.encode(multihash(canonical_jwk));\n  const patches = [\n    {\n      action: \"replace\",\n      document: {\n        public_keys: [\n          {\n            id,\n            type: constants.did.publicKeyType,\n            jwk: publicKeyJwk,\n            purpose: [\"auth\", \"general\"],\n          },\n        ],\n      },\n    },\n  ];\n  const canonical_delta = JSON.stringify({\n    update_commitment: commitment_hash,\n    patches,\n  });\n  const delta = base64url.encode(canonical_delta);\n  const delta_hash = base64url.encode(multihash(canonical_delta));\n  const canonical_suffix_data = JSON.stringify({\n    delta_hash,\n    recovery_commitment: commitment_hash,\n  });\n  const didUniqueSuffix = base64url.encode(multihash(canonical_suffix_data));\n  const suffix_data = base64url.encode(canonical_suffix_data);\n  const shortFormDid = `did:${constants.did.methodName}:${didUniqueSuffix}`;\n  const longFormDid = `${shortFormDid}?-${constants.did.methodName}-initial-state=${suffix_data}.${delta}`;\n  return longFormDid;\n};\n\nexport class Wallet {\n  privateKey;\n  publicKeyJwk;\n  privateKeyJwk;\n  did;\n  constructor(privateKey?) {\n    this.privateKey = privateKey ? privateKey : generatePrivateKey();\n    const { publicKeyJwk, privateKeyJwk } = privateKeyToJwk(this.privateKey);\n    this.publicKeyJwk = publicKeyJwk;\n    this.privateKeyJwk = privateKeyJwk;\n    this.did = publicKeyJwkToIonDid(publicKeyJwk);\n  }\n\n  siop = (options?) => {\n    const jti = generateJti();\n    const header = {\n      alg: constants.jwt.header.alg,\n      kid: `${this.did}#${constants.did.keyId}`,\n    };\n    const payload = {\n      iss: constants.jwt.payload.iss,\n      iat: constants.jwt.payload.iat,\n      exp: constants.jwt.payload.exp,\n      did: this.did,\n      jti,\n      sub_jwk:this.publicKeyJwk,\n      ...options,\n    };\n    return this.sign(header, payload);\n  };\n\n  sign = (header, payload) => {\n    const pem = privateKeyToPem(this.privateKey);\n    const encodedHeader = base64url.encode(JSON.stringify(header));\n    const encodedPayload = base64url.encode(JSON.stringify(payload));\n    const message = `${encodedHeader}.${encodedPayload}`;\n    const signature = base64url.encode(\n      crypto.createSign(constants.hash.type).update(message).sign(pem)\n    );\n    const result = `${encodedHeader}.${encodedPayload}.${signature}`;\n    return result;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}