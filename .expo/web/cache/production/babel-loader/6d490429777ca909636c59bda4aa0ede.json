{"ast":null,"code":"var inherits=require('inherits');var DEREncoder=require(\"./der\");function PEMEncoder(entity){DEREncoder.call(this,entity);this.enc='pem';};inherits(PEMEncoder,DEREncoder);module.exports=PEMEncoder;PEMEncoder.prototype.encode=function encode(data,options){var buf=DEREncoder.prototype.encode.call(this,data);var p=buf.toString('base64');var out=['-----BEGIN '+options.label+'-----'];for(var i=0;i<p.length;i+=64){out.push(p.slice(i,i+64));}out.push('-----END '+options.label+'-----');return out.join('\\n');};","map":{"version":3,"sources":["/Users/naohirofujie/.anyenv/envs/nodenv/versions/14.5.0/lib/node_modules/expo-cli/node_modules/asn1.js/lib/asn1/encoders/pem.js"],"names":["inherits","require","DEREncoder","PEMEncoder","entity","call","enc","module","exports","prototype","encode","data","options","buf","p","toString","out","label","i","length","push","slice","join"],"mappings":"AAAA,GAAIA,CAAAA,QAAQ,CAAGC,OAAO,CAAC,UAAD,CAAtB,CAEA,GAAIC,CAAAA,UAAU,CAAGD,OAAO,SAAxB,CAEA,QAASE,CAAAA,UAAT,CAAoBC,MAApB,CAA4B,CAC1BF,UAAU,CAACG,IAAX,CAAgB,IAAhB,CAAsBD,MAAtB,EACA,KAAKE,GAAL,CAAW,KAAX,CACD,EACDN,QAAQ,CAACG,UAAD,CAAaD,UAAb,CAAR,CACAK,MAAM,CAACC,OAAP,CAAiBL,UAAjB,CAEAA,UAAU,CAACM,SAAX,CAAqBC,MAArB,CAA8B,QAASA,CAAAA,MAAT,CAAgBC,IAAhB,CAAsBC,OAAtB,CAA+B,CAC3D,GAAIC,CAAAA,GAAG,CAAGX,UAAU,CAACO,SAAX,CAAqBC,MAArB,CAA4BL,IAA5B,CAAiC,IAAjC,CAAuCM,IAAvC,CAAV,CAEA,GAAIG,CAAAA,CAAC,CAAGD,GAAG,CAACE,QAAJ,CAAa,QAAb,CAAR,CACA,GAAIC,CAAAA,GAAG,CAAG,CAAE,cAAgBJ,OAAO,CAACK,KAAxB,CAAgC,OAAlC,CAAV,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,CAAC,CAACK,MAAtB,CAA8BD,CAAC,EAAI,EAAnC,EACEF,GAAG,CAACI,IAAJ,CAASN,CAAC,CAACO,KAAF,CAAQH,CAAR,CAAWA,CAAC,CAAG,EAAf,CAAT,EADF,CAEAF,GAAG,CAACI,IAAJ,CAAS,YAAcR,OAAO,CAACK,KAAtB,CAA8B,OAAvC,EACA,MAAOD,CAAAA,GAAG,CAACM,IAAJ,CAAS,IAAT,CAAP,CACD,CATD","sourcesContent":["var inherits = require('inherits');\n\nvar DEREncoder = require('./der');\n\nfunction PEMEncoder(entity) {\n  DEREncoder.call(this, entity);\n  this.enc = 'pem';\n};\ninherits(PEMEncoder, DEREncoder);\nmodule.exports = PEMEncoder;\n\nPEMEncoder.prototype.encode = function encode(data, options) {\n  var buf = DEREncoder.prototype.encode.call(this, data);\n\n  var p = buf.toString('base64');\n  var out = [ '-----BEGIN ' + options.label + '-----' ];\n  for (var i = 0; i < p.length; i += 64)\n    out.push(p.slice(i, i + 64));\n  out.push('-----END ' + options.label + '-----');\n  return out.join('\\n');\n};\n"]},"metadata":{},"sourceType":"script"}