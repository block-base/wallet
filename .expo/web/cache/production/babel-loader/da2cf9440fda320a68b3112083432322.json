{"ast":null,"code":"'use strict';var utils=exports;var BN=require('bn.js');var minAssert=require('minimalistic-assert');var minUtils=require('minimalistic-crypto-utils');utils.assert=minAssert;utils.toArray=minUtils.toArray;utils.zero2=minUtils.zero2;utils.toHex=minUtils.toHex;utils.encode=minUtils.encode;function getNAF(num,w,bits){var naf=new Array(Math.max(num.bitLength(),bits)+1);naf.fill(0);var ws=1<<w+1;var k=num.clone();for(var i=0;i<naf.length;i++){var z;var mod=k.andln(ws-1);if(k.isOdd()){if(mod>(ws>>1)-1)z=(ws>>1)-mod;else z=mod;k.isubn(z);}else{z=0;}naf[i]=z;k.iushrn(1);}return naf;}utils.getNAF=getNAF;function getJSF(k1,k2){var jsf=[[],[]];k1=k1.clone();k2=k2.clone();var d1=0;var d2=0;while(k1.cmpn(-d1)>0||k2.cmpn(-d2)>0){var m14=k1.andln(3)+d1&3;var m24=k2.andln(3)+d2&3;if(m14===3)m14=-1;if(m24===3)m24=-1;var u1;if((m14&1)===0){u1=0;}else{var m8=k1.andln(7)+d1&7;if((m8===3||m8===5)&&m24===2)u1=-m14;else u1=m14;}jsf[0].push(u1);var u2;if((m24&1)===0){u2=0;}else{var m8=k2.andln(7)+d2&7;if((m8===3||m8===5)&&m14===2)u2=-m24;else u2=m24;}jsf[1].push(u2);if(2*d1===u1+1)d1=1-d1;if(2*d2===u2+1)d2=1-d2;k1.iushrn(1);k2.iushrn(1);}return jsf;}utils.getJSF=getJSF;function cachedProperty(obj,name,computer){var key='_'+name;obj.prototype[name]=function cachedProperty(){return this[key]!==undefined?this[key]:this[key]=computer.call(this);};}utils.cachedProperty=cachedProperty;function parseBytes(bytes){return typeof bytes==='string'?utils.toArray(bytes,'hex'):bytes;}utils.parseBytes=parseBytes;function intFromLE(bytes){return new BN(bytes,'hex','le');}utils.intFromLE=intFromLE;","map":{"version":3,"sources":["/Users/naohirofujie/.anyenv/envs/nodenv/versions/14.5.0/lib/node_modules/expo-cli/node_modules/elliptic/lib/elliptic/utils.js"],"names":["utils","exports","BN","require","minAssert","minUtils","assert","toArray","zero2","toHex","encode","getNAF","num","w","bits","naf","Array","Math","max","bitLength","fill","ws","k","clone","i","length","z","mod","andln","isOdd","isubn","iushrn","getJSF","k1","k2","jsf","d1","d2","cmpn","m14","m24","u1","m8","push","u2","cachedProperty","obj","name","computer","key","prototype","undefined","call","parseBytes","bytes","intFromLE"],"mappings":"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","sourcesContent":["'use strict';\n\nvar utils = exports;\nvar BN = require('bn.js');\nvar minAssert = require('minimalistic-assert');\nvar minUtils = require('minimalistic-crypto-utils');\n\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n  naf.fill(0);\n\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n\n  for (var i = 0; i < naf.length; i++) {\n    var z;\n    var mod = k.andln(ws - 1);\n    if (k.isOdd()) {\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n\n    naf[i] = z;\n    k.iushrn(1);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    []\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      var m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      var m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n           this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n                                     bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new BN(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n\n"]},"metadata":{},"sourceType":"script"}